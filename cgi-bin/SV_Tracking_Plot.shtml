<!DOCTYPE html>

<html lang="en">
<head>
  <meta name="generator" content="HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.12), see www.w3.org">
  <link rel="stylesheet" type="text/css" href="/css/tcui-styles.css">
  <meta http-equiv="content-type" content="text/html; charset=utf-8">

  <title>SV Tracking</title>
  <meta name="generator" content="BBEdit 10.5">
</head>

<body class="page">
<div class="container clearfix">
  <div style="padding: 10px 10px 10px 0 ;"> <a href="./">
        <img src="/images/trimble-logo.jpg" alt="Trimble Logo" id="l
ogo"> </a>
      </div>
  <!-- end #logo-area -->
</div>
<div id="top-header-trim"></div>
<div id="content-area">
<div id="content">
<div id="main-content">

<script src="/libraries/jquery-1.10.2.min.js" type="text/javascript"></script>
<script src="/libraries/highcharts.js" type="text/javascript"></script>
<script src="/libraries/highcharts-more.js" type="text/javascript"></script>
<script src="/libraries/exporting.js" type="text/javascript"></script>
<!--
<script src="jquery-1.10.2.min.js"></script>
<script src="highcharts.js"></script>
<script src="highcharts-more.js"></script>
-->


  <h1 id="title">SV Tracking: <!--#include virtual="file.html" --></h1><script type="text/javascript">
//create_Buttons("SV_TRACKING")
  </script>

  <div id="container"></div>
  <div id="status"></div><br/>

  <script type="text/javascript">

  function getURLParameter(name) {
    return decodeURI(
        (RegExp(name + '=' + '(.+?)(&|$)').exec(location.search)||[,null])[1]
    );
  }

  var Max_Bands = 1


  function create_plot(System,SV) {


    if (System == "GPS") {
        Max_Bands=4;
        }

    if (System == "GLONASS") {
        Max_Bands=4;
        }

    if (System == "SBAS") {
        Max_Bands=2;
        }

    $("#status").text("Loading data from server")


    var options = {

        chart: {
            renderTo: 'container',
            type: 'scatter',
            markersize: 2,
            zoomType:"xy",
        },

        legend: {
            enabled: true
        },
        title: {
            text: 'Tracking Info (' + System +  ': ' + SV + ')'
            },

        xAxis : {
            type: 'datetime',
            title: {
                text: 'Time'
            }
        },

        yAxis: [
            {
//            min:30,
//            max:60,
            endOnTick:false,
            labels: {
                enabled: true
                },
            title: {
                text: 'SNRs'
                },
//            type: "category",
            gridLineWidth: 0,
//            categories: [
//                    '',
//                    '1',
//                    '2',
//                    '3',
//                    '4'],
            },
            {
            min:0,
            max:89,
//            startOnTick:true,
//            endOnTick:false,
//            minorTickInterval: 15,
//            minorTickInterval: 10,
//            tickInterval: 90 / Max_Bands,
            tickIntervall: 10,
            gridLineWidth: 0,
            labels: {
                enabled: true
                },
            opposite: true,
            title: {
                text: 'Elevation'
                },
           }
           ],
        tooltip: {
            formatter: function() {
  //                console.log(this)

                if (this.point.Az) {
                   return '<b>'+ this.series.name +'<\/b><br/>'
                   +' Az: ' +this.point.Az +' SNR: ' +this.point.SNR;
                   }
                else {
                   return '<b>'+ this.series.name +'<\/b><br/>'
                   +' SNR: ' +this.point.SNR;
//                   return '<b>'+ this.series.name +': <\/b>' +this.point.y;

                    }
                }
        },
        plotOptions: {
            series: {
                turboThreshold: 0
                },
            scatter: {
                marker: {
                    radius: 1,
                    states: {
                        hover: {
                            enabled: true,
                            lineColor: 'rgb(100,100,100)'
                        }
                    }
                },
                states: {
                    hover: {
                        marker: {
                            enabled: false
                        }
                    }
                },
            }
        },

        }

    elev_data=[];
    options.series=[]
    last_slip=[]


    options.series[0] = {
        name: "Elevation",
        data: new Array(),
        yAxis: 1,
        marker: {
           enabled: true,
           radius: 2},
        }

    for (var i=1;i<=Max_Bands;i++) {
        options.series[i]= {
          name: 'Band: ' + (i),
          data: new Array(),
          marker: {
             enabled: true,
             radius: 2},
             }
        last_slip[i]=-1
        }

    if (System == "GPS") {
        options.series[1].name="L1 C/A"
        options.series[2].name="L2 E"
        options.series[3].name="L2 CS"
        options.series[4].name="L5 IQ"
  //      options.yAxis[0].categories[1]="L1 C/A"
//        options.yAxis[0].categories[2]="L2 E"
///        options.yAxis[0].categories[3]="L2 CS"
//        options.yAxis[0].categories[4]="L5 IQ"
        }

    if (System == "SBAS") {
        options.series[1].name="L1 C/A"
        options.series[2].name="L5 IQ"
//        options.yAxis[0].categories[1]="L1 C/A"
//        options.yAxis[0].categories[2]="L5 IQ"
        }

    if (System == "GLONASS") {
        options.series[1].name="L1 C/A"
        options.series[2].name="L1 P"
        options.series[3].name="L2 C/A"
        options.series[4].name="L2 P"
//        options.yAxis[0].categories[1]="L1 C/A"
//        options.yAxis[0].categories[2]="L1 P"
//        options.yAxis[0].categories[3]="L2 C/A"
//        options.yAxis[0].categories[4]="L2 P"
        }


    File_Name=System + "-" + SV +".SNR-SV";
//    console.log(File_Name)

    $.ajax({
      xhrFields: {
       onprogress: function(evt)
           {
//           console.log("progress")
//           console.log(evt)
              if (evt.lengthComputable) {
                 var percentComplete = evt.loaded / evt.total*100;
//                 console.log(percentComplete)
                 $("#status").text("Loaded " + percentComplete.toFixed(0) + '%')
                }
              else {
                 $("#status").text("Loaded " + ~~(evt.loaded/1024) + ' Kb')
                 }
            }
          },
       type : "GET",
       url : File_Name,
       data: {},

       success:function(data) {
        // Split the lines
        var lines = data.split('\n');

        // Iterate over the lines and add categories or series
        $.each(lines, function(lineNo, line) {
            var items = line.split(',');

            if (items[0]) {
//		console.log(items[0],parseFloat(items[1]),items[2],items[3])		 
                options.series[0].data.push({
                     x:items[0],
                     y:parseFloat(items[1]),
                     Az: items[2],
                     SNR: parseInt(items[3]),
                     })

                for (var i=1;i<=Max_Bands;i++) {
                    if (items[2+(i*2)]) {
                        current_slip=parseInt(items[2+(i*2)])
                        if ((last_slip[i]==-1) || (last_slip[i]==current_slip)) {
                            options.series[i].data.push({
                                x:items[0],
                                y:parseInt(items[1+(i*2)]),
                                Signal:i,
                                SNR: parseInt(items[1+(i*2)]),
                                });
                            }
                        else {
                            options.series[i].data.push({
                                 x:items[0],
                                 y:parseInt(items[1+(i*2)]),
                                 Signal: i,
                                 SNR: parseInt(items[1+(i*2)]),
                                 marker: {
                                     symbol: 'url(/images/Sign-Alert-icon.png)'
                                     }
                                 })
                            }
                        last_slip[i]=current_slip
                        }
                    else {
                        options.series[i].data.push({
                            x:items[0],
                            y: null,
                            SNR: null,
                            Signal:i,
                        });
                    }
                }
            }});

        // Create the chart. It has to be done here as it is made on the call back

        var chart = new Highcharts.Chart(options);
//        console.log(options)
        $("#status").text("")

        }

    }
    )
  }

  var System=getURLParameter("SYSTEM")
  var Sv=getURLParameter("SV")
  var Item=getURLParameter("ITEM")

  if ( System == "null")  {
    System="GPS"
    }


  function update_plot(Value) {
    console.log("Update Plot to " + Value)
    create_plot(System,Sv,Value)
    }


</script><!--#include virtual="Tracking_Buttons.html" -->
</div>
</div>
</div>
</body>
</html>
