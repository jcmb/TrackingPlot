<!DOCTYPE html>
<html lang="en">
<head>
   <link rel="stylesheet" type="text/css" href="/css/tcui-styles.css">
   <meta charset="utf-8" />
   <title>Tracking</title>
   <meta name="generator" content="BBEdit 10.5" />
</head>
<body class="page">
<div class="container clearfix">
  <div style="padding: 10px 10px 10px 0 ;"> <a href="./">
        <img src="/images/trimble-logo.jpg" alt="Trimble Logo" id="logo"> </a>
      </div>
  <!-- end #logo-area -->
</div>
<div id="top-header-trim"></div>
<div id="content-area">
<div id="content">
<div id="main-content">

<script src="/libraries/jquery-1.10.2.min.js"></script>
<script src="/libraries/highcharts.js"></script>
<script src="/libraries/highcharts-more.js"></script>
<script src="/libraries/exporting.js"></script>
<h1 id="title">Tracking: <!--#include virtual="file.html" --></h1>
<p/>
<div id="container"></div>
<div id="status"></div><br/>

<!--#include virtual="Buttons.html" -->
<script>
create_Buttons("TRACKING")
</script>



<script>

function getURLParameter(name) {
    return decodeURI(
        (RegExp(name + '=' + '(.+?)(&|$)').exec(location.search)||[,null])[1]
    );
}

function create_plot(System,Freq,Signal) {
//    $("body").css("cursor", "progress");
    $("#status").text("Processing")
    var Max_SVs = 1

    if (System == "GPS") {
        Min_SVs=1;
        Max_SVs=32;
        }

    if (System == "GLONASS") {
        Min_SVs=1;
        Max_SVs=24;
        }


    if (System == "SBAS") {
//        Max_SVs=39;
        Min_SVs=120;
        Max_SVs=158;
        }


    var options = {
        chart: {
            renderTo: 'container',
            type: 'scatter',
            markersize: 1,
            zoomType:"xy",
            animation:false,
        },

        legend: {
            enabled: false
        },

        title: {
            text: 'Tracking  (' + System +  ' ' + Freq + '-' + Signal +')'
        },
        xAxis : {
            type: 'datetime',
            title: {
                text: 'GPS Time'
            }
        },
        yAxis: {
            min:Min_SVs,
            max:Max_SVs,
            endOnTick:false,
            title: {
                text: 'SV'
            }
        },
        tooltip: {
            formatter: function() {
//                console.log(this)
                return '<b>'+ this.series.name +'</b><br/>'
                 +'Elev: '+ this.point.Elev +' Az: ' +this.point.Az +' SNR: ' +this.point.SNR;
                }
        },
        plotOptions: {
            series: {
                turboThreshold: 0
                },
            scatter: {
                marker: {
                    radius: 1,
                    states: {
                        hover: {
                            enabled: true,
                            lineColor: 'rgb(100,100,100)'
                        }
                    }
                },
                states: {
                    hover: {
                        marker: {
                            enabled: false
                        }
                    }
                },
            }
        },

        }

    series_data=[];
    options.series=[]
    last_slip=[]
    last_Az=[]
    last_Elev=[]
    last_Every=[]

    for (var i=0;i<Max_SVs;i++) {
//        series_data[i]=new Array()
        options.series[i]= {name: 'SV: ' + (i+1),
                            data: new Array()}
        last_slip[i]=-1
        last_Az[i]=-9
        last_Elev[i]=-19
        last_Every[i]=1
        }

    File_Name=System + "-" +Freq + "-" +Signal +".SNR";
//    console.log(File_Name)
//    $("body").css("cursor", "wait");
    $("#status").text("Loading data from server")

    $.ajax({
      xhrFields: {
       onprogress: function(evt)
           {
//               if (evt.loaded > 4000000) {
//                   every=60
//                   every=1
//                   }
//               else {
//                   if (evt.loaded > 500000) {
//                       every=15
//                       every=1
//                       }
//                   else {
//                       every=1
//                       }
//
//                   }

              if (evt.lengthComputable) {
                 var percentComplete = evt.loaded / evt.total*100;
                 $("#status").text("Loaded " + ~~(percentComplete) + '%')
                }
              else {
                 $("#status").text("Loaded " + ~~(evt.loaded/1024) + ' Kb')
                 }
            }
          }
       ,

       type : "GET",
       url : File_Name,
       data: {},
       success: function(data) {
        // Split the lines
//        console.timeStamp("Data Loaded")
        var lines = data.split('\n');
//        console.timeStamp("Data Split")

        // Iterate over the lines and add categories or series
        $.each(lines, function(lineNo, line) {
            var items = line.split(',');
//            $("#status").text("Loading line: "+lineNo)
//            console.log(items[0])
            if (items[0]) {
//                console.log("Is Valid")
                current_slip=parseInt(items[5])
                sv=parseInt(items[1])-1
                Elev=parseInt(items[2])
                Az=parseInt(items[3])
                time=items[0]
                if ((last_slip[sv]==-1) || (last_slip[sv]==current_slip)) {
//                    if ((Elev != last_Elev[sv]) || (Az != last_Az[sv])) {
//                    if ((Elev != last_Elev[sv]) || (Az != last_Az[sv]) || ((time % every)==0)) {
//                      console.log("Time: " + time)
//                      console.log("Every: " + every)

                        options.series[sv].data.push({
                            x:time,
                            y:sv+1,
                            Elev: Elev,
                            Az: Az,
                            SNR: items[4],
                            })
                        last_Elev[sv]=Elev
                        last_Az[sv]=Az
                        last_Every[sv]=0
//                        }
                    last_Every[sv]++
                    }
                else {
                    options.series[sv].data.push({
                        x: time,
                        y: sv+1,
                        Elev: Elev,
                        Az:   Az,
                        SNR:  items[4],
                        marker: {
                            symbol: 'url(http://trimbletools.com/Sign-Alert-icon.png)'
                        }
                    });
                    }
                last_slip[sv]=current_slip
                }
            }
            );

        $("#status").text("Creating Plot")
        var chart = new Highcharts.Chart(options);
        $("#status").text("")
//        $("body").css("cursor", "default");
//        console.log(options)
        }
    })
  }

System=getURLParameter("SYSTEM")
Freq=getURLParameter("FREQ")
Signal=getURLParameter("SIGNAL")

if ( System == "null")  {
    System="GPS"
    }

if ( Freq == "null")  {
    Freq="L1"
    }

if ( Signal == "null")  {
    Signal="CA";
    }

create_plot(System,Freq,Signal)
</script>

</div>
</div>
</div>
</body>
</html>
